A = A+30
A
S
y
y = x + 10
lenght(y)
length(y)
x=42
a=3
1+2
y = c(2,5,7,2,1)
length(y)
v2 = seq(from=-4, to=5,by=1.5)
v2
v3 = seq(from=-4, to=5, length.out(4))
v3
v3 = seq(4,5 length.out(4))
v3 = seq(4,5 length.out(4))
v2 = seq(4,5 length.out(4))
v3 = seq(4,5 length.out4)
v3 = seq(4,5, length.out4)
v3 = seq(4,5, length.out = 4)
v3
v3 = (2:7)
v3
s = rep(7,10)
s
h = 56.938736
round(h, 1)
rnorm(n=31, mean = 14, sd = 2)
randomStrings(n=10, len=5, digits=TRUE, upperalpha=TRUE, loweralpha=TRUE,
unique=TRUE, check=TRUE)
randomSequence(min=1, max=20, col=1, check=TRUE)
install.packages("random")
randomSequence(min=1, max=20, col=1, check=TRUE)
v = c(2,6,0)
mat1 = matrix[4,3,3]
mat1 = matrix(4,3,3)
v = c(2,6,0)
mat1 = matrix(4,3,3)
v = c(2,6,0)
mat1 = matrix(4,3,3)
mat1
mat1
v1 = c(11,5,9,2)mat2 = matrix(v1,2,2)
v1 = c(11,5,9,2)
mat2 = matrix(v1,2,2)
v1 = c(11,5,9,2)
mat2 = matrix(v1,2,2)
mat2
mat3 = matrix(v1,2,2, byrow = T)
mat3
mat3 = matrix(v1,2,2, byrow = F)
mat3
v1= c(21,5,2,15)
v2= c(-3,-6,1,-7)
v3= c(102,10,-13,4)
mat4 = matrix(cbind(v1,v2,v3),4,3)
mat4
mat4[3]
mat4[2]
mat4[3:6]
mat4[c(3:6)]
mat4[3,]
mat4[,3]
mat4[0:12]
mat4[mat4>0 & mat4<10]
mat4[,-2]
colnames(mat4)<-c("A","B","C")
rownames(mat4)<-c("F","H","P","Z")
x=colnames(mat4)<-c("A","B","C")
rownames(mat4)<-c("F","H","P","Z")
x
colnames(mat4)<-c("A","B","C")
rownames(mat4)<-c("F","H","P","Z")
mat4
a=3
b=c(2,6)
c=matrix(rnorm(4),2,2)
d=rep(4,3)
mylist = list(a,b,c,d)
mylist
mylist[2]
!(5>3)
x = 5
y = 7
!(!(x < 4) & !!!(y > 12))
a = (21:120)
b= length(a)
b
d = a[4]
a = (21:120)
a
b= length(a)
b
d = a[4]
a[4]
d = a[4]
a[4]
d=a[4]
d
f = a[2:6]
f
f = a[2:6]
f
g = a[1,3,7]
g = a[1],a[3],a[7]
g = a[1]
g
g
g = a(c[1,3,7])
g = a[c(1,3,7)]
g
h = a[1:100:4]
h
h = a[:100:4]
h = a(seq[1:100:4])
h = a[seq(1:100:4)]
h
h = a(1:100:4)
h = a[1:100:4]
h
i = a[a>25 & a<29]
i
i = a[a>24 & a<29]
i
h = a[seq(1,100,4)]
h
l = a[25,4]
l = a[a(21:120), 25,4]
l = a[seq(21,120), 25,4]
l = a[seq(21,120,1), 25,4]
v = c(2,6,0)
mat1 = matrix(4,3,3)
mat1
v1 = c(11,5,9,2)
mat2 = matrix(v1,2,2)
mat2
mat3 = matrix(v1,2,2, byrow = F)
mat3
v1= c(21,5,2,15)
v2= c(-3,-6,1,-7)
v3= c(102,10,-13,4)
mat4 = matrix(cbind(v1,v2,v3),4,3)
mat4
mat4[mat4>0 & mat4<10]
mat4[,-2]
colnames(mat4)<-c("A","B","C")
rownames(mat4)<-c("F","H","P","Z")
mat4
a=3
b=c(2,6)
c=matrix(rnorm(4),2,2)
d=rep(4,3)
mylist = list(a,b,c,d)
mylist
mylist[2]
!(5>3)
x = 5
y = 7
!(!(x < 4) & !!!(y > 12))
a = (21:120)
a
b= length(a)
b
d=a[5]
d
f = a[2:6]
f
h = a[seq(1,100,4)]
h
i = a[a>24 & a<29]
i
l = a[seq(21,120,1), 25,4]
l = a[seq(21,120,1)]
l
library(random)
varnamer = readline(prompt = "enter value")
varnamer = readline(prompt = "enter value")
34
varnamer = readline("enter value")
56
print(varnamer)
print(varnamer)
print(i)
for(i in seq(1,7,by=2))
for(i in seq(1,7,by=2))
{
print(i)
}
for(i in seq(1,7,by=2))
{
print(i)
}
a = list(10,20,"ac")
for(i in a)
{
print(i)
}
print(i*2)
setwd("C:/Users/hp/OneDrive/Desktop/M1 - Subj/Algorithemic tools project")
#Required libraries
library(dplyr)
library(ggplot2)
library(stats)
library(car)
library(lmtest)
library(nortest)
# Load the dataset
data <- read.csv("test.csv")
# verifying the column names
print(colnames(data))
# the column names are renamed as it's easy to use
data <- data %>%
rename(
Dep_Delay = Departure.Delay.in.Minutes,
Arr_Delay = Arrival.Delay.in.Minutes,
Inf_Ent = Inflight.entertainment,
Satisfaction = satisfaction
)
# Preprocess Satisfaction - Converting to the binary factor
data$Satisfaction <- ifelse(data$Satisfaction == "satisfied", 1, 0)
data$Satisfaction <- as.factor(data$Satisfaction)
# Verify the Preprocessing
print(table(data$Satisfaction))
# It Shows the distribution as 0 if it's neutral or dissatisfied and 1 if satisfied
# A/B Testing
# 1 t-test - Comparing Departure Delay
ttest_res <- t.test(data$Dep_Delay ~ data$Satisfaction, var.equal = FALSE)
print(ttest_res)
# If p-value < 0.05 then departure Delay significantly differs b/w satisfaction groups.
# 2 Chi-squared test - Customer type vs Satisfaction
chisq_table <- table(data$Customer.Type, data$Satisfaction)
chtest_res <- chisq.test(chisq_table)
print(chtest_res)
# Interpretation - If p-value < 0.05, Customer Type is associated with Satisfaction.
# 3 ANOVA - Departure Delay across the Class
anova_res <- aov(Dep_Delay ~ Class, data = data)
print(summary(anova_res))
# If p-value < 0.05, Departure Delay differs.
# Regression Analysis
# Logistic regression - considering multiple predictors
model <- glm(Satisfaction ~ Dep_Delay + Inf_Ent + Class + Age + Flight.Distance,
data = data, family = "binomial")
summary(model)
# Improving the model
step_mod <- step(model, direction = "backward")
summary(step_mod)
# It will remove all the non-significant variables to improve the model
# Diagnostic Tests
# 1 Variance Inflation Factor(VIF)
vif_res <- vif(step_mod)
print(vif_res)
# VIF < 5 indicates that there are no severe multicollinearity.
# 2 Breusch-Pagan Test
bp_test <- bptest(step_mod)
print(bp_test)
# If p-value > 0.05 means no evidence of heteroskedasticity
# 3 RESET Test - Checking the  model specification
reset_test <- resettest(step_mod)
print(reset_test)
# If p-value > 0.05 then it indicates that model is correctly specified
# 4 Normality Test on residuals
resid <- residuals(step_mod, type = "deviance")
norm_test <- ad.test(resid)
print(norm_test)
# If p-value > 0.05 - residuals are normally distributed
# Data Visualization
# 1 Univariate chart - Histogram for Departure Delay
ggplot(data, aes(x = Dep_Delay)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Distribution of Departure Delays", x = "Departure Delay (minutes)", y = "Count") +
theme_minimal()
ggsave("Histogram_Departure_Delay.png")
# 2 Univariate chart - Bar plot Satisfaction
ggplot(data, aes(x = Satisfaction)) +
geom_bar(fill = "orange", color = "black") +
labs(title = "Satisfaction Distribution", x = "Satisfaction (0 = No, 1 = Yes)", y = "Count") +
theme_minimal()
ggsave("Bar_Satisfaction.png")
# 3 Bivariate chart - Scatterplot of Departure and Arrival Delay by Satisfaction
ggplot(data, aes(x = Dep_Delay, y = Arr_Delay, color = Satisfaction)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
labs(title = "Departure vs. Arrival Delay by Satisfaction",
x = "Departure Delay (minutes)", y = "Arrival Delay (minutes)") +
theme_minimal()
ggsave("Scatterplot_Satisfaction.png")
# 4 Complex chart - Boxplot of Departure Delay by Class and Satisfaction
ggplot(data, aes(x = Class, y = Dep_Delay, fill = Satisfaction)) +
geom_boxplot() +
labs(title = "Departure Delay by Class and Satisfaction",
x = "Class", y = "Departure Delay (minutes)") +
theme_minimal()
ggsave("Boxplot_Class_Satisfaction.png")
# Notes for Report
# The dataset identifies the main factors influencing passenger happiness:-
# 1) According to regression and t-test results, departure delays dramatically lower satisfaction.
# 2) According to the regression coefficient, in-flight entertainment increases customer satisfaction.
# 3) Delay experiences are impacted by class disparities (ANOVA and boxplot).
# Recommendations: Reduce wait times and improve entertainment to increase customer happiness.
